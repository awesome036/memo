● リダイレクトの書き方

header("Location: welcome.html",true,301);

● PHPにおけるclassについて
// 物（Object）の設計図（class）を作る。
class className{
	// これで白紙の設計図

	// classブロック直下に
	// 処理は書けない
	// echo 2;
	// これと一緒
	// <html>
	// 	<h1>a</h1>
	// </html>
	// htmlブロック直下には
	// headとbodyブロックしか書けない。
}

// 設計図をもとに、ものを生成する。
$myclass = new className();

class Robot{
	// ↑クラス名はアッパーキャメル。

	// class直下にかけるのは次の二つ。
	// ①属性(プロパティ)=データ≒変数宣言
	// ②振舞い(メソッド)=処理≒関数

	// ①プロパティ宣言
	public $type = "cat";
	private $name = "ドラえもん";
	private $id = null;
	private $bodyColor = null;

	// ②メソッド定義
	public function getName(){
		// 自分は、$thisで表現することが出来る。
		return $this->name;
	}

	public function sayHello(){
		// 「$this->」で自メソッドも呼べる。
		$this->talk("Hello");
	}
	public function sayGoodBye(){
		$this->talk("Good-Bye");
	}
	private function talk($message){
		echo $message;
	}

	// アクセス修飾子について
	// プロパティとメソッドの
	// 公開度合いを制御することが出来る。
	// ①public:公の。誰でも触れる
	// ②private:自分だけ触れる。
	// ③protected:※今はやらない。

	// プロパティは原則private！
	// メソッドは必要なものだけpublic
	// 良い←private,protected,public→悪い

	// 【重要】
	// オブジェクト指向の3大要素
	// の内の一つ、
	// 「カプセル化(情報隠蔽)」
	// →①情報を隠すことが出来る。
	//  ②データと処理をひとくくりで
	//   扱うことが出来る。

	// コンストラクタ定義
	// →インスタンス化（new）のタイミング
	// で1度だけ呼び出されるメソッド
	// public function __construct(){
	// 	// コンストラクタですべきこと
	// 	// ->初期化
	// 	$this->name="dora";
	// 	$this->id=999;
	// 	$this->type="dog";
	// 	$this->bodyColor="red";
	// 	echo "XXX";
	// }
	public function __construct($name,$id,$type,$bc){
		// コンストラクタですべきこと
		// ->初期化
		$this->name=$name;
		$this->id=$id;
		$this->type=$type;
		$this->bodyColor=$bc;
	}
}

// Robot生成
// $r = new Robot();
$r = new Robot("D","X","cat","blue");
echo $r->getName();

// インスタンスは複数生成することが出来る
$r2 = new Robot("Dorami","X","cat","blue");
echo $r2->getName();
// 生成のことを特に、「インスタンス化」と言う。
// インスタンス＝実体≒オブジェクト

// 実体から、名前を聞き出す。
// メソッド呼び出しは「アロー演算子(->)」を用いる。
// JSだと「ピリオド(.)」 
// 例）console.log();


// プロパティにアクセスも可能
echo $r->type;
// 注意事項↑$いらない、()いらない
// ()が必要なのはfunction

// アクセス可能なので、書き換えも可能
// →でもやらない
// $r->id = "2999DC001";
// echo $r->id;

echo 1;

$r->sayHello();
$r->sayGoodBye();

/*
名称のつけ方について
名称のつけ方の代表として、
次の二つがある。
①キャメルケース
	キャメル＝ラクダ
	単語と単語をつなぎ、そのつなぎ目を
	大文字にする。
	MyClassName

	①－①アッパーキャメル
		MyClassName
	②－②ローワーキャメル
		myClassName
②スネークケース
	単語と単語をアンダーバーでつなぎ、
	すべて小文字にする。
	my_class_name
*/

/*
オブジェクト指向の3大要素
①カプセル化
②継承(インヘリタンス)
③多態性(ポリモーフィズム)
*/

● classの書き方
１　例①(カプセル化)
[Class]
class Car{
	// プロパティ定義
	private $type;
	private $color;
	private $number;

	// メソッド定義

	public function __construct($type,$color,$number){
		// コンストラクタは
		// newのタイミングで処理される
		$this->type = $type;
		$this->color = $color;
		$this->number = $number;
	}
	public function drive(){
		echo "走る。。。";
	}
	public function setColor($newColor = "white"){
		// 引数のデフォルト値は
		// 代入式で設定することが出来る
		// 【注意】デフォルト値は
		// 引数が複数存在する場合、
		// 最後に寄せる必要がある。
		$this->color = $newColor;
	}
	public function getColor(){
		return $this->color;
	}
	public function getNumber(){
		return $this->number;
	}

}

[index]
// classファイルの読み込み
require_once("./Car.class.php");

// Carクラスの実体（インスタンス）化
$car = new Car("sports","yellow","56-78");
$car->drive();

$car->setColor("black");
echo $car->getColor();

$car->setColor();
echo $car->getColor();

echo $car->getNumber();

２　例②(継承)
[CarClass]
class Car{
	// プロパティ定義
	private $type;
	private $color;
	private $number;

	// protectedは継承先の
	// 子供には公開。その他には非公開
	protected $a;
	
	// メソッド定義
	public function __construct($type,$color,$number){
		// コンストラクタは
		// newのタイミングで処理される
		$this->type = $type;
		$this->color = $color;
		$this->number = $number;
	}
	public function drive(){
		echo "走る。。。";
	}
	public function setColor($newColor = "white"){
		// 引数のデフォルト値は
		// 代入式で設定することが出来る
		// 【注意】デフォルト値は
		// 引数が複数存在する場合、
		// 最後に寄せる必要がある。
		$this->color = $newColor;
	}
	public function getColor(){
		return $this->color;
	}
	public function getNumber(){
		return $this->number;
	}

}

[RaceCarClass]
class RaceCar extends Car{
	// extendsで親の性質を引き継ぐ
	// レーシングカー独自のメソッド
	public function boostDrive(){
		$this->a = 100;
		$this->number = "11-11";
		echo "時速200km!!";
	}
	
	// メソッドの上書き（オーバーライド）
	// →メソッドを再定義すればOK
	public function drive(){
		echo "100km!!";
	}
}

[index]
require_once("./Car.class.php");

// Carクラスの実体（インスタンス）化
$car = new Car("sports","yellow","56-78");
$car->drive();

$car->setColor("black");
echo $car->getColor();

$car->setColor();
echo $car->getColor();

echo $car->getNumber();

// ここから継承の話
echo "<br>";

// classファイルの読み込み
require_once("./RaceCar.class.php");

// Carクラスの実体（インスタンス）化
$car = new RaceCar("sports","yellow","56-78");
$car->drive();
$car->boostDrive();

// protectedは見えない
// echo $car->a;


$car->color = "pink";
echo $car->getNumber();
var_dump($car);

３　例③(多態性)
[SuperClass]
class Super{
	public function nake(){
		echo "...";
	}
}

[Sub1Class]
require_once("Super.class.php");
class Sub1 extends Super{
	// 処理のオーバーライド(override)
	public function nake(){
		echo "sub1";
	}
}

[Sub2Class]
require_once("Super.class.php");
class Sub2 extends Super{
	// 処理のオーバーライド(override)
	public function nake(){
		echo "sub2";
	}
}

[index]
require_once("Sub1.class.php");
require_once("Sub2.class.php");

// インスタンス化
$s1 = new Sub1();
$s1->nake();

$s2 = new Sub2();
$s2->nake();

// 多態性
$s = null;
if(time()%2 == 1){
	$s = new sub1();
}else{
	$s = new sub2();
}
// 同一のメッセージで異なる処理が実行される
$s->nake();

● classにおけるstaticの扱い
// static(静的)
// Pointは、「インスタンスに依存せず、独立して存在する。」
class MyClass{
	// インスタンス変数
	public $color;

	// staticのキーワードで、
	// 共通領域に確保される。

	// ※クラス変数
	public static $count = 0;

	public function up(){
		// 自クラスのstaticを触るには、
		// self::が使える
		self::$count++;
		// MyClass::$count++;一緒
	}

	public static function a(){
		// static functionから、
		// インスタンス領域（$this）は
		// 触れない
		// $this->color = "red";
		echo "a";
	}

	// 定数定義
	// 慣例として定数名は大文字＆アンダーバー
	const MAX_COUNT = 999;
}
MyClass::a();
echo MyClass::MAX_COUNT;

// 定数は書き換え不可
// MyClass::MAX_COUNT = 20;

// オブジェクト指向対応前の定数定義
// 同様に、定数は書き換え不可
define("MIN_COUNT",-999);
echo MIN_COUNT;

$m1 = new MyClass();
$m2 = new MyClass();

$m1->color = "red";
$m2->color = "white";

$m1->up();
$m1->up();

echo $m1->color;
echo $m2->color;

// staticへのアクセス
// [書式]クラス名::プロパティ
echo MyClass::$count;
